# Build the test suite for Android libsndfile
# 2023, Sylvain Carette, based on the original CMakeLists.txt from libsndfile

# Initial set up

cmake_minimum_required (VERSION 3.5)

# Do not run this script if using MSVC compiler
if (CMAKE_SYSTEM_NAME STREQUAL "Android" AND MSVC)
    message(FATAL_ERROR "Error: Must use Clang to compile for Android, not MSVC.")
endif()

# Locate config.h
set(CONFIG_H_FILE "${CMAKE_CURRENT_BINARY_DIR}/src/config.h")

# Extract PACKAGE_VERSION
file(STRINGS ${CONFIG_H_FILE} PACKAGE_VERSION_DEFN REGEX "#define PACKAGE_VERSION")
string(REGEX REPLACE "#define PACKAGE_VERSION \"([^\"]+)\"" "\\1" PACKAGE_VERSION ${PACKAGE_VERSION_DEFN})

# Extract LIB_VERSION
string(REGEX REPLACE "([0-9]+\\.[0-9]+\\.[0-9]+).*" "\\1" LIB_VERSION ${PACKAGE_VERSION})

# Set the absolute source directory
set(ABS_TOP_SRCDIR "${CMAKE_CURRENT_SOURCE_DIR}")

# Set the archive name
if(NOT ARCHIVE_NAME)
    set(ARCHIVE_NAME "libsndfile-testsuite-${TARGET_ARCHITECTURE}")
endif()

# Set the tarball name
set(TARBALL "${ARCHIVE_NAME}.tar.gz")

# User definable device path to the test script - default to data/local/tmp
set(DEVICE_TESTS_PATH "/data/local/tmp/${ARCHIVE_NAME}/lib")

# Set path and script content for the binheader and pedantic tests
set(PYTHON_EXECUTABLE "/usr/bin/python")

set(RUN_PH_TEST_CONTENT "#!/bin/bash
echo \"Running pedantic-header-test\"
/bin/sh ${CMAKE_CURRENT_BINARY_DIR}/../tests/pedantic-header-test.sh > ${CMAKE_CURRENT_BINARY_DIR}/pedantic_test_result 2>&1
if [[ -s ${CMAKE_CURRENT_BINARY_DIR}/pedantic_test_result ]]; then
	content=$(<\"${CMAKE_CURRENT_BINARY_DIR}/pedantic_test_result\")
	sed -i \"s/<PLACEHOLDER_PEDANTIC_TEST_RESULT>/\$content/g\" \"${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh\"
else
    echo \"pedantic_test_result is empty\"
    exit 1
fi
") # End RUN_PH_TEST_CONTENT

file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/run_ph_test.sh "${RUN_PH_TEST_CONTENT}")
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/run_ph_test.sh PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ)


# Create the first content segment for test_wrapper file
set(TEST_WRAPPER_CONTENT "#!/system/bin/sh

# Build the test suite for Android libsndfile
# 2023, Sylvain Carette, based on the original CMakeLists.txt from libsndfile
# This file is generated by CMake
# Copyright (C) 2008-2017 Erik de Castro Lopo <erikd@mega-nerd.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#     * Neither the author nor the names of any contributors may be used
#       to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


HOST_TRIPLET=${TARGET_ARCHITECTURE}
PACKAGE_VERSION=${PACKAGE_VERSION}
LIB_VERSION=${LIB_VERSION}

# Set target device library path
export LD_LIBRARY_PATH=\${pwd}/lib:$LD_LIBRARY_PATH

echo \"Starting tests...\"

sfversion=\$(./tests/sfversion | grep libsndfile | sed \"s/-exp\$//\")

if test \"$sfversion\" != libsndfile-$PACKAGE_VERSION ; then
	echo \"Error : sfversion (\$sfversion) and PACKAGE_VERSION ($PACKAGE_VERSION) don't match.\"
	exit 1
	fi

# Force exit on errors.
set -e

") # End first segment TEST_WRAPPER_CONTENT


# Create the command script file
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "${TEST_WRAPPER_CONTENT}")

# Macro to add a milestone to the command script
macro(add_milestone message)
	set(echo_line "echo \"  $sfversion ${message}\"\n")
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "echo \"----------------------------------------------------------------------\"\n")
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "${echo_line}")	
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "echo \"----------------------------------------------------------------------\"\n")
endmacro(add_milestone)

# Macro to add test to the command script
macro(add_android_test test_name)
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "./tests/${test_name}\n")
endmacro(add_android_test)

# Macro to add test with arguments to the command script
macro(add_android_test_args test_name args)
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "./tests/${test_name} ${args}\n")
endmacro(add_android_test_args)

# Keep a list of all the test programs for the tarball
set(TEST_PROGRAMS_LIST "")

# Add pedantic header test to the command script
# Ensure the placeholder is there
file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "# Check the header file.\necho \"<PLACEHOLDER_PEDANTIC_TEST_RESULT>\"\n\n")
# As we don't have a C compiler on the target, and as we also need the library, we perform this test post-build
add_custom_target(run_phtest ALL
    COMMAND ${CMAKE_CURRENT_BINARY_DIR}/run_ph_test.sh
    COMMENT "Running post-build pedantic header test"
)
add_dependencies(run_phtest sndfile)


# Here we continue with almost as the original libsndfile CMakeLists.txt

include (CMakeAutoGen)

# generate tests sources from autogen templates

macro (wrap_test_sources)
	foreach (test_source ${ARGN})
		get_filename_component (test_name ${test_source} NAME_WE)
		file (READ ${test_source} test_content)
		string (REGEX REPLACE "int[[:space:]]+main[[:space:]]*\\(([^)]*)\\)" "${test_name}_wrapper(\\1)" wrapped_content "${test_content}")
		file (WRITE ${CMAKE_CURRENT_BINARY_DIR}/${test_name}_wrapped.c "${wrapped_content}")
		list (APPEND wrapped_test_sources ${CMAKE_CURRENT_BINARY_DIR}/${test_name}_wrapped.c)
	endforeach ()
	set (WRAPPED_TEST_SOURCES ${wrapped_test_sources} PARENT_SCOPE)
endmacro ()
lsf_autogen (tests benchmark c)
lsf_autogen (tests floating_point_test c)
lsf_autogen (tests header_test c)
lsf_autogen (tests pcm_test c)
lsf_autogen (tests pipe_test c)
lsf_autogen (tests rdwr_test c)
lsf_autogen (tests scale_clip_test c)
lsf_autogen (tests utils c h)
lsf_autogen (tests write_read_test c)
lsf_autogen (src test_endswap c)

# utils static library
add_library(test_utils STATIC tests/utils.c)
target_include_directories (test_utils
	PUBLIC
		src
		${CMAKE_CURRENT_BINARY_DIR}/src
		${CMAKE_CURRENT_BINARY_DIR}/tests
	)
target_link_libraries(test_utils PRIVATE sndfile)

### test_main

add_executable (test_main
	src/test_main.c
	src/test_main.h
	src/test_conversions.c
	src/test_float.c
	src/test_endswap.c
	src/test_audio_detect.c
	src/test_log_printf.c
	src/test_file_io.c
	src/test_ima_oki_adpcm.c
	src/test_strncpy_crlf.c
	src/test_broadcast_var.c
	src/test_cart_var.c
	src/test_binheader_writef.c
	src/test_nms_adpcm.c
	)
target_include_directories (test_main
	PUBLIC
		src
		${CMAKE_CURRENT_BINARY_DIR}/src
		${CMAKE_CURRENT_BINARY_DIR}/tests
	)
target_link_libraries (test_main PRIVATE sndfile)
add_android_test (test_main)
list(APPEND TEST_PROGRAMS_LIST tests/test_main)

### sfversion_test

add_executable (sfversion tests/sfversion.c)
target_include_directories (sfversion
	PRIVATE
		src
		${CMAKE_CURRENT_BINARY_DIR}/src
	)
target_link_libraries (sfversion sndfile)
# No need to add this test to the command script as it is already done in the first segment
list(APPEND TEST_PROGRAMS_LIST tests/sfversion)

### error_test

add_executable (error_test tests/error_test.c)
target_link_libraries (error_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (error_test)
list(APPEND TEST_PROGRAMS_LIST tests/error_test)

### ulaw_test
add_executable (ulaw_test tests/ulaw_test.c)
target_link_libraries (ulaw_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (ulaw_test)
list(APPEND TEST_PROGRAMS_LIST tests/ulaw_test)

### alaw_test
add_executable (alaw_test tests/alaw_test.c)
target_link_libraries (alaw_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (alaw_test)
list(APPEND TEST_PROGRAMS_LIST tests/alaw_test)

### dwvw_test

add_executable (dwvw_test tests/dwvw_test.c)
target_link_libraries (dwvw_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (dwvw_test)
list(APPEND TEST_PROGRAMS_LIST tests/dwvw_test)

### command_test

add_executable (command_test tests/command_test.c)
target_link_libraries (command_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test_args (command_test all)
list(APPEND TEST_PROGRAMS_LIST tests/command_test)

### floating_point_test

add_executable (floating_point_test
	tests/dft_cmp.c
	tests/floating_point_test.c
	)
target_link_libraries (floating_point_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
target_include_directories (floating_point_test PRIVATE tests)
add_android_test (floating_point_test)
list(APPEND TEST_PROGRAMS_LIST tests/floating_point_test)

### checksum_test

add_executable (checksum_test tests/checksum_test.c)
target_link_libraries (checksum_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (checksum_test)
list(APPEND TEST_PROGRAMS_LIST tests/checksum_test)

### scale_clip_test

add_executable (scale_clip_test tests/scale_clip_test.c)
target_link_libraries (scale_clip_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (scale_clip_test)
list(APPEND TEST_PROGRAMS_LIST tests/scale_clip_test)

### headerless_test

add_executable (headerless_test tests/headerless_test.c)
target_link_libraries (headerless_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (headerless_test)
list(APPEND TEST_PROGRAMS_LIST tests/headerless_test)

### rdwr_test

add_executable (rdwr_test tests/rdwr_test.c)
target_link_libraries (rdwr_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (rdwr_test)
list(APPEND TEST_PROGRAMS_LIST tests/rdwr_test)

### locale_test

add_executable (locale_test tests/locale_test.c)
target_link_libraries (locale_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (locale_test)
list(APPEND TEST_PROGRAMS_LIST tests/locale_test)

### win32_ordinal_test

# Disabled because we cannot test with shared sndfile library
#	if (WIN32 AND BUILD_SHARED_LIBS)
#		add_executable (win32_ordinal_test tests/win32_ordinal_test.c)
#		target_link_libraries (win32_ordinal_test PRIVATE sndfile test_utils)
#		add_android_test (win32_ordinal_test win32_ordinal_test)
#	endif ()

### cpp_test

add_executable (cpp_test tests/cpp_test.cc)
target_link_libraries (cpp_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (cpp_test)
list(APPEND TEST_PROGRAMS_LIST tests/cpp_test)

### external_libs_test

add_executable (external_libs_test tests/external_libs_test.c)
target_link_libraries (external_libs_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (external_libs_test)
list(APPEND TEST_PROGRAMS_LIST tests/external_libs_test)

### format_check_test

add_executable (format_check_test tests/format_check_test.c)
target_link_libraries (format_check_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (format_check_test)
list(APPEND TEST_PROGRAMS_LIST tests/format_check_test)

### channel_test

add_executable (channel_test tests/channel_test.c)
target_link_libraries (channel_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (channel_test)
list(APPEND TEST_PROGRAMS_LIST tests/channel_test)


### pcm_test

add_executable (pcm_test tests/pcm_test.c)
target_link_libraries (pcm_test
	PRIVATE
		sndfile
		test_utils
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test (pcm_test)
list(APPEND TEST_PROGRAMS_LIST tests/pcm_test)

add_milestone("passed common tests.")

### common test executables

add_executable (write_read_test
tests/generate.c
tests/write_read_test.c
)
target_link_libraries (write_read_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
target_include_directories (write_read_test PRIVATE tests)
list(APPEND TEST_PROGRAMS_LIST tests/write_read_test)

add_executable (lossy_comp_test tests/lossy_comp_test.c)
target_link_libraries (lossy_comp_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/lossy_comp_test)

add_executable (peak_chunk_test tests/peak_chunk_test.c)
target_link_libraries (peak_chunk_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/peak_chunk_test)

add_executable (header_test tests/header_test.c)
target_link_libraries (header_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/header_test)

add_executable (misc_test tests/misc_test.c)
target_link_libraries (misc_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/misc_test)

add_executable (string_test tests/string_test.c)
target_link_libraries (string_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/string_test)

add_executable (multi_file_test tests/multi_file_test.c)
target_link_libraries (multi_file_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/multi_file_test)

add_executable (aiff_rw_test tests/aiff_rw_test.c)
target_link_libraries (aiff_rw_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/aiff_rw_test)

add_executable (chunk_test tests/chunk_test.c)
target_link_libraries (chunk_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/chunk_test)

add_executable (long_read_write_test tests/long_read_write_test.c)
target_link_libraries (long_read_write_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/long_read_write_test)

add_executable (raw_test tests/raw_test.c)
target_link_libraries (raw_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/raw_test)

add_executable (compression_size_test tests/compression_size_test.c)
target_link_libraries (compression_size_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/compression_size_test)

add_executable (ogg_test tests/ogg_test.c)
target_link_libraries (ogg_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/ogg_test)

add_executable (ogg_opus_test tests/ogg_opus_test.c)
target_link_libraries (ogg_opus_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/ogg_opus_test)

add_executable (mpeg_test tests/mpeg_test.c)
target_link_libraries (mpeg_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/mpeg_test)

add_executable (stdin_test tests/stdin_test.c)
target_link_libraries (stdin_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
set_target_properties (stdin_test PROPERTIES RUNTIME_OUTPUT_DIRECTORY "tests")
list(APPEND TEST_PROGRAMS_LIST tests/stdin_test)

add_executable (stdout_test tests/stdout_test.c)
target_link_libraries (stdout_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
set_target_properties (stdout_test PROPERTIES RUNTIME_OUTPUT_DIRECTORY "tests")
list(APPEND TEST_PROGRAMS_LIST tests/stdout_test)

add_executable (stdio_test tests/stdio_test.c)
target_link_libraries (stdio_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/stdio_test)

add_executable (pipe_test tests/pipe_test.c)
target_link_libraries (pipe_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/pipe_test)

add_executable (virtual_io_test tests/virtual_io_test.c)
target_link_libraries (virtual_io_test
PRIVATE
	sndfile
	test_utils
	$<$<BOOL:${LIBM_REQUIRED}>:m>
)
list(APPEND TEST_PROGRAMS_LIST tests/virtual_io_test)

### g72x_test

add_executable (g72x_test src/G72x/g72x_test.c)
target_include_directories (g72x_test
	PRIVATE
		src
		${CMAKE_CURRENT_BINARY_DIR}/src
	)
target_link_libraries (g72x_test
	PRIVATE
		sndfile
		$<$<BOOL:${LIBM_REQUIRED}>:m>
	)
add_android_test_args (g72x_test all)
list(APPEND TEST_PROGRAMS_LIST tests/g72x_test)
add_milestone("passed tests on G72x files.")

### aiff-tests

add_android_test_args (write_read_test aiff)
add_android_test_args (lossy_comp_test aiff_ulaw)
add_android_test_args (lossy_comp_test aiff_alaw)
add_android_test_args (lossy_comp_test aiff_gsm610)
add_android_test_args (peak_chunk_test aiff)
add_android_test_args (header_test aiff)
add_android_test_args (misc_test aiff)
add_android_test_args (string_test aiff)
add_android_test_args (multi_file_test aiff)
add_android_test (aiff_rw_test)
add_milestone("passed tests on AIFF files.")

### au-tests

add_android_test_args (write_read_test au)
add_android_test_args (lossy_comp_test au_ulaw)
add_android_test_args (lossy_comp_test au_alaw)
add_android_test_args (lossy_comp_test au_g721)
add_android_test_args (lossy_comp_test au_g723)
add_android_test_args (header_test au)
add_android_test_args (misc_test au)
add_android_test_args (multi_file_test au)
add_milestone("passed tests on AU files.")

### caf-tests

add_android_test_args (write_read_test caf)
add_android_test_args (lossy_comp_test caf_ulaw)
add_android_test_args (lossy_comp_test caf_alaw)
add_android_test_args (header_test caf)
add_android_test_args (peak_chunk_test caf)
add_android_test_args (misc_test caf)
add_android_test_args (chunk_test caf)
add_android_test_args (string_test caf)
add_android_test_args (long_read_write_test alac)
add_milestone("passed tests on CAF files.")

# wav-tests
add_android_test_args (write_read_test wav)
add_android_test_args (lossy_comp_test wav_pcm)
add_android_test_args (lossy_comp_test wav_ima)
add_android_test_args (lossy_comp_test wav_msadpcm)
add_android_test_args (lossy_comp_test wav_ulaw)
add_android_test_args (lossy_comp_test wav_alaw)
add_android_test_args (lossy_comp_test wav_gsm610)
add_android_test_args (lossy_comp_test wav_g721)
add_android_test_args (lossy_comp_test wav_nmsadpcm)
add_android_test_args (peak_chunk_test wav)
add_android_test_args (header_test wav)
add_android_test_args (misc_test wav)
add_android_test_args (string_test wav)
add_android_test_args (multi_file_test wav)
add_android_test_args (chunk_test wav)
add_milestone("passed tests on WAV files.")

### w64-tests

add_android_test_args (write_read_test w64)
add_android_test_args (lossy_comp_test w64_ima)
add_android_test_args (lossy_comp_test w64_msadpcm)
add_android_test_args (lossy_comp_test w64_ulaw)
add_android_test_args (lossy_comp_test w64_alaw)
add_android_test_args (lossy_comp_test w64_gsm610)
add_android_test_args (header_test w64)
add_android_test_args (misc_test w64)
add_milestone("passed tests on W64 files.")

### rf64-tests

add_android_test_args (write_read_test rf64)
add_android_test_args (header_test rf64)
add_android_test_args (misc_test rf64)
add_android_test_args (string_test rf64)
add_android_test_args (peak_chunk_test rf64)
add_android_test_args (chunk_test rf64)
add_milestone("passed tests on RF64 files.")

### raw-tests
add_android_test_args (write_read_test raw)
add_android_test_args (lossy_comp_test raw_ulaw)
add_android_test_args (lossy_comp_test raw_alaw)
add_android_test_args (lossy_comp_test raw_gsm610)
add_android_test_args (lossy_comp_test vox_adpcm)
add_android_test (raw_test)
add_milestone("passed tests on RAW files.")

### paf-tests
add_android_test_args (write_read_test paf)
add_android_test_args (header_test paf)
add_android_test_args (misc_test paf)
add_milestone("passed tests on PAF files.")

### svx-tests
add_android_test_args (write_read_test svx)
add_android_test_args (header_test svx)
add_android_test_args (misc_test svx)
add_milestone("passed tests on SVX files.")

### nist-tests
add_android_test_args (write_read_test nist)
add_android_test_args (lossy_comp_test nist_ulaw)
add_android_test_args (lossy_comp_test nist_alaw)
add_android_test_args (header_test nist)
add_android_test_args (misc_test nist)
add_milestone("passed tests on NIST files.")

### ircam-tests
add_android_test_args (write_read_test ircam)
add_android_test_args (lossy_comp_test ircam_ulaw)
add_android_test_args (lossy_comp_test ircam_alaw)
add_android_test_args (header_test ircam)
add_android_test_args (misc_test ircam)
add_milestone("passed tests on IRCAM files.")

### voc-tests
add_android_test_args (write_read_test voc)
add_android_test_args (lossy_comp_test voc_ulaw)
add_android_test_args (lossy_comp_test voc_alaw)
add_android_test_args (header_test voc)
add_android_test_args (misc_test voc)
add_milestone("passed tests on VOC files.")

### mat4-tests
add_android_test_args (write_read_test mat4)
add_android_test_args(header_test mat4)
add_android_test_args (misc_test mat4)
add_milestone("passed tests on MAT4 files.")

### mat5-tests
add_android_test_args (write_read_test mat5)
add_android_test_args (header_test mat5)
add_android_test_args (misc_test mat5)
add_milestone("passed tests on MAT5 files.")

### pvf-tests
add_android_test_args (write_read_test pvf)
add_android_test_args (header_test pvf)
add_android_test_args (misc_test pvf)
add_milestone("passed tests on PVF files.")

### xi-tests
add_android_test_args (lossy_comp_test xi_dpcm)
add_milestone("passed tests on XI files.")

### htk-tests
add_android_test_args (write_read_test htk)
add_android_test_args (header_test htk)
add_android_test_args (misc_test htk)
add_milestone("passed tests on HTK files.")

### avr-tests
add_android_test_args (write_read_test avr)
add_android_test_args (header_test avr)
add_android_test_args (misc_test avr)
add_milestone("passed tests on AVR files.")

### sds-tests
add_android_test_args (write_read_test sds)
add_android_test_args (header_test sds)
add_android_test_args (misc_test sds)
add_milestone("passed tests on SDS files.")

# sd2-tests
add_android_test_args (write_read_test sd2)
add_milestone("passed tests on SD2 files.")

### wve-tests
add_android_test_args (lossy_comp_test wve)
add_milestone("passed tests on WVE files.")

### mpc2k-tests
add_android_test_args (write_read_test mpc2k)
add_android_test_args (header_test mpc2k)
add_android_test_args (misc_test mpc2k)
add_milestone("passed tests on MPC2K files.")

### flac-tests
add_android_test_args (write_read_test flac)
add_android_test_args (compression_size_test flac)
add_android_test_args (string_test flac)
add_milestone("passed tests on FLAC files.")

### vorbis-tests
add_android_test (ogg_test)
add_android_test_args (compression_size_test vorbis)
add_android_test_args (lossy_comp_test ogg_vorbis)
add_android_test_args (string_test ogg)
add_android_test_args (misc_test ogg)
add_milestone("passed tests on OGG/VORBIS files.")

### opus-tests ###
add_android_test (ogg_opus_test)
add_android_test_args (compression_size_test opus)
add_android_test_args (lossy_comp_test ogg_opus)
add_android_test_args (string_test opus)
add_milestone("passed tests on OPUS files.")

### mpeg-tests ###
add_android_test (mpeg_test)
add_android_test_args (compression_size_test mpeg)
add_milestone("passed tests on MPEG files.")

### io-tests
add_android_test (stdio_test)
add_android_test (pipe_test)
add_android_test (virtual_io_test)
add_milestone("passed tests on stdio/pipe/vio tests.")

# Run the Python script and check result
# As we don't have python on the target, we need to perform this test as we build the test suite
file(GLOB BINHEADER_SOURCES "${ABS_TOP_SRCDIR}/src/*.c")
execute_process(
    COMMAND ${PYTHON_EXECUTABLE} "${ABS_TOP_SRCDIR}/src/binheader_writef_check.py" ${BINHEADER_SOURCES} 
    RESULT_VARIABLE BINHEADER_TEST_RESULT
    OUTPUT_VARIABLE BINHEADER_TEST_OUTPUT
    ERROR_VARIABLE BINHEADER_TEST_ERROR
)

# Embed the result in the test script
if(${BINHEADER_TEST_RESULT} EQUAL 0)
	string(STRIP ${BINHEADER_TEST_OUTPUT} BINHEADER_CLEAN_OUTPUT)
    add_milestone(${BINHEADER_CLEAN_OUTPUT})
else()
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "echo 'binheader_writef_check.py failed:'\n")
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "cat <<EOF\n${BINHEADER_TEST_ERROR}\nEOF\n")
endif()


set (SNDFILE_TEST_TARGETS
		test_utils
		test_main
		sfversion
		error_test
		ulaw_test
		alaw_test
		dwvw_test
		command_test
		floating_point_test
		checksum_test
		scale_clip_test
		headerless_test
		rdwr_test
		locale_test
		cpp_test
		external_libs_test
		format_check_test
		channel_test
		pcm_test
		write_read_test
		lossy_comp_test
		peak_chunk_test
		header_test
		misc_test
		string_test
		multi_file_test
		aiff_rw_test
		chunk_test
		long_read_write_test
		raw_test
		compression_size_test
		ogg_test
		ogg_opus_test
		mpeg_test
		stdin_test
		stdout_test
		stdio_test
		pipe_test
		virtual_io_test
		g72x_test
		)

set_target_properties(${SNDFILE_TEST_TARGETS} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "tests")


# Add the test programs to the tarball
add_custom_target(create_tarball
	COMMAND tar "cvzf" "${ARCHIVE_NAME}.tar.gz" --transform "s,^,${ARCHIVE_NAME}/," ${TEST_PROGRAMS_LIST} "test_wrapper.sh"
    COMMENT "Creating tarball for testsuite"
)

install(CODE "execute_process(COMMAND ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target create_tarball)")
